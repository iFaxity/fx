#!/usr/bin/env node
//
// Script to synchronize publishing for all packages
//
const path = require('path');
const { writeJSON, shell, resolvePackages } = require('./shared');

const ROOT_DIR = path.join(__dirname, '../');
const PACKAGES_DIR = path.join(ROOT_DIR, 'packages');
const rootPkg = require('../package.json');
const semver = [ 'major', 'minor', 'patch' ];
const PACKAGES_DIR = path.join(ROOT_DIR, 'packages');

const tag = process.argv[2] || 'patch';
const version = bumpVersion(tag);
const packages = resolvePackages(PACKAGES_DIR);

// Bumps the version from the root package
function bumpVersion(tag) {
  // ${{ github.ref }} format
  if (tag.startsWith('refs/tags/v')) {
    return tag.substring(11);
  } else if (tag[0] == 'v') {
    return tag.substring(1);
  }

  const idx = semver.indexOf(tag);
  const version = rootPkg.version.split('.').map(Number);

  // Fallthrough for version
  switch(idx) {
    case 0:
      version[0] += 1;
    case 1:
      version[1] = idx == 1 ? version[1] + 1 : 0;
    case 2:
      version[2] = idx == 2 ? version[2] + 1 : 0;
      break;
    default:
      throw new Error(`Version '${tag}' tag not recognised`);
  }

  return version.join('.');
}

// Assures that all linked dependencies gets bumped too
function bumpPackage(dir, pkg, version) {
  const depsList = [ 'dependencies', 'peerDependencies', 'devDependencies']
    .map(key => pkg[key])
    .filter(Boolean);

  depsList.forEach(deps => {
    for (const dep of Object.keys(deps).filter(d => packages.has(d))) {
      deps[dep] = `^${version}`;
    }
  });

  // Upgrade package version
  pkg.version = version;
  writeJSON(path.join(dir, 'package.json'), pkg);
}

// Program entrypoint
console.log(`v${rootPkg.version} --> v${version}`);

// Update version in root package
rootPkg.version = version;
writeJSON(path.join(ROOT_DIR, 'package.json'), rootPkg);

// Upgrade peer packages
for (const { package, path } of packages.values()) {
  bumpPackage(path, package, version);
}

// Create a commit with a release tag
shell(`git commit -am 'Release v${version}'`);

// Finally publish to NPM
for (const [ name, package ] of packages) {
  console.log(`Publishing package ${name} (v${version})`);
  shell(`yarn publish '${package.path}' --new-version ${version} --access public --no-git-tag-version`);
}
shell('git push');

console.log('Done');
